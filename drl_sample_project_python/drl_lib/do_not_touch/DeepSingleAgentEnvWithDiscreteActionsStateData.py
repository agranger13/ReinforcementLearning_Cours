# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeepSingleAgentEnvWithDiscreteActionsStateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeepSingleAgentEnvWithDiscreteActionsStateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeepSingleAgentEnvWithDiscreteActionsStateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def StateDescription(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def StateDescriptionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def StateDescriptionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def StateDescriptionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def StateDescriptionSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def IsGameOver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def AvailableActionsIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def AvailableActionsIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def AvailableActionsIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def AvailableActionsIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # DeepSingleAgentEnvWithDiscreteActionsStateData
    def MaxActionsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(6)
def DeepSingleAgentEnvWithDiscreteActionsStateDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddStateDescription(builder, stateDescription): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stateDescription), 0)
def DeepSingleAgentEnvWithDiscreteActionsStateDataAddStateDescription(builder, stateDescription):
    """This method is deprecated. Please switch to AddStateDescription."""
    return AddStateDescription(builder, stateDescription)
def StartStateDescriptionVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DeepSingleAgentEnvWithDiscreteActionsStateDataStartStateDescriptionVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStateDescriptionVector(builder, numElems)
def AddStateDescriptionSize(builder, stateDescriptionSize): builder.PrependUint64Slot(1, stateDescriptionSize, 0)
def DeepSingleAgentEnvWithDiscreteActionsStateDataAddStateDescriptionSize(builder, stateDescriptionSize):
    """This method is deprecated. Please switch to AddStateDescriptionSize."""
    return AddStateDescriptionSize(builder, stateDescriptionSize)
def AddIsGameOver(builder, isGameOver): builder.PrependBoolSlot(2, isGameOver, 0)
def DeepSingleAgentEnvWithDiscreteActionsStateDataAddIsGameOver(builder, isGameOver):
    """This method is deprecated. Please switch to AddIsGameOver."""
    return AddIsGameOver(builder, isGameOver)
def AddScore(builder, score): builder.PrependFloat32Slot(3, score, 0.0)
def DeepSingleAgentEnvWithDiscreteActionsStateDataAddScore(builder, score):
    """This method is deprecated. Please switch to AddScore."""
    return AddScore(builder, score)
def AddAvailableActionsIds(builder, availableActionsIds): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(availableActionsIds), 0)
def DeepSingleAgentEnvWithDiscreteActionsStateDataAddAvailableActionsIds(builder, availableActionsIds):
    """This method is deprecated. Please switch to AddAvailableActionsIds."""
    return AddAvailableActionsIds(builder, availableActionsIds)
def StartAvailableActionsIdsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def DeepSingleAgentEnvWithDiscreteActionsStateDataStartAvailableActionsIdsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAvailableActionsIdsVector(builder, numElems)
def AddMaxActionsCount(builder, maxActionsCount): builder.PrependUint64Slot(5, maxActionsCount, 0)
def DeepSingleAgentEnvWithDiscreteActionsStateDataAddMaxActionsCount(builder, maxActionsCount):
    """This method is deprecated. Please switch to AddMaxActionsCount."""
    return AddMaxActionsCount(builder, maxActionsCount)
def End(builder): return builder.EndObject()
def DeepSingleAgentEnvWithDiscreteActionsStateDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)